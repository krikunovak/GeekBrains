"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка
 на наличие только чисел.
 Проверить работу исключения на реальном примере.
 Необходимо запрашивать у пользователя данные и заполнять список.
 Класс-исключение должен контролировать типы данных элементов списка.
 Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
 пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
 При этом скрипт завершается, сформированный список выводится на экран.
 Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
 При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и
 вносить его в список, только если введено число.
 Класс-исключение должен не позволить пользователю ввести текст (не число) и
 отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.

"""

class OwnError(Exception):
    def __init__(self, txt):
        self.txt = txt


class Do_list:
    def __init__(self, *args):
        self.my_list = []

    def my_input(self):
        while True:
            try:
                value_1 = input('Введите значения и нажимайте Enter - ')
                if value_1.lower() == "stop":
                    print(f'Текущий список - {self.my_list} \n ')
                    return f'Вы вышли'
                else:
                    #print(f"{value_1.isdigit()}")
                    if value_1.isdigit() == False:
                        raise OwnError(f"!!!Ошибка: Введено недопустимое значение - не число")
                    val = int(value_1)
                    self.my_list.append(val)
            except OwnError as err:
                print(err)

try_except = Do_list(1)
print(try_except.my_input())

